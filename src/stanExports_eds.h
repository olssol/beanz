// Generated by rstantools.  Do not edit by hand.

/*
    Test is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Test is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Test.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_eds_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'eds', line 27, column 2 to column 10)",
                                                      " (in 'eds', line 28, column 2 to column 28)",
                                                      " (in 'eds', line 29, column 2 to column 37)",
                                                      " (in 'eds', line 30, column 1 to column 18)",
                                                      " (in 'eds', line 31, column 2 to column 20)",
                                                      " (in 'eds', line 34, column 1 to column 26)",
                                                      " (in 'eds', line 35, column 2 to column 20)",
                                                      " (in 'eds', line 36, column 1 to column 17)",
                                                      " (in 'eds', line 40, column 4 to column 44)",
                                                      " (in 'eds', line 39, column 9 to line 41, column 3)",
                                                      " (in 'eds', line 38, column 4 to column 48)",
                                                      " (in 'eds', line 37, column 21 to line 39, column 3)",
                                                      " (in 'eds', line 37, column 2 to line 41, column 3)",
                                                      " (in 'eds', line 43, column 4 to column 45)",
                                                      " (in 'eds', line 42, column 18 to line 44, column 3)",
                                                      " (in 'eds', line 42, column 2 to line 44, column 3)",
                                                      " (in 'eds', line 45, column 2 to column 19)",
                                                      " (in 'eds', line 64, column 2 to column 23)",
                                                      " (in 'eds', line 66, column 4 to column 50)",
                                                      " (in 'eds', line 65, column 20 to line 67, column 3)",
                                                      " (in 'eds', line 65, column 2 to line 67, column 3)",
                                                      " (in 'eds', line 48, column 2 to column 31)",
                                                      " (in 'eds', line 49, column 2 to column 23)",
                                                      " (in 'eds', line 50, column 2 to column 24)",
                                                      " (in 'eds', line 51, column 2 to column 23)",
                                                      " (in 'eds', line 59, column 4 to column 31)",
                                                      " (in 'eds', line 57, column 9 to line 60, column 3)",
                                                      " (in 'eds', line 55, column 6 to column 31)",
                                                      " (in 'eds', line 54, column 22 to line 56, column 5)",
                                                      " (in 'eds', line 54, column 4 to line 56, column 5)",
                                                      " (in 'eds', line 52, column 14 to line 57, column 3)",
                                                      " (in 'eds', line 52, column 2 to line 60, column 3)",
                                                      " (in 'eds', line 61, column 2 to column 21)",
                                                      " (in 'eds', line 13, column 2 to column 20)",
                                                      " (in 'eds', line 14, column 2 to column 18)",
                                                      " (in 'eds', line 15, column 2 to column 20)",
                                                      " (in 'eds', line 16, column 9 to column 13)",
                                                      " (in 'eds', line 16, column 2 to column 21)",
                                                      " (in 'eds', line 17, column 8 to column 12)",
                                                      " (in 'eds', line 17, column 1 to column 23)",
                                                      " (in 'eds', line 18, column 9 to column 13)",
                                                      " (in 'eds', line 18, column 15 to column 17)",
                                                      " (in 'eds', line 18, column 2 to column 21)",
                                                      " (in 'eds', line 19, column 26 to column 28)",
                                                      " (in 'eds', line 19, column 2 to column 30)",
                                                      " (in 'eds', line 20, column 1 to column 17)",
                                                      " (in 'eds', line 21, column 1 to column 21)",
                                                      " (in 'eds', line 22, column 2 to column 33)",
                                                      " (in 'eds', line 23, column 2 to column 18)",
                                                      " (in 'eds', line 24, column 2 to column 19)",
                                                      " (in 'eds', line 28, column 22 to column 26)",
                                                      " (in 'eds', line 29, column 27 to column 31)",
                                                      " (in 'eds', line 30, column 8 to column 12)",
                                                      " (in 'eds', line 31, column 9 to column 11)",
                                                      " (in 'eds', line 34, column 17 to column 21)",
                                                      " (in 'eds', line 35, column 9 to column 11)",
                                                      " (in 'eds', line 36, column 8 to column 12)",
                                                      " (in 'eds', line 64, column 9 to column 13)"};
#include <stan_meta_header.hpp>
class model_eds final : public model_base_crtp<model_eds> {
private:
  int SIZE;
  int NX;
  int NTAU;
  Eigen::Matrix<double, -1, 1> Y;
  Eigen::Matrix<double, -1, 1> SIGY;
  Eigen::Matrix<double, -1, -1> X;
  std::vector<int> TAUINX;
  double D;
  double DELTA;
  int PRIORSIG;
  double B;
  double MU;
 
public:
  ~model_eds() { }
  
  inline std::string model_name() const final { return "model_eds"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_eds(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_eds_namespace::model_eds";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 34;
      context__.validate_dims("data initialization","SIZE","int",
          context__.to_vec());
      SIZE = std::numeric_limits<int>::min();
      
      current_statement__ = 34;
      SIZE = context__.vals_i("SIZE")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "SIZE", SIZE, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization","NX","int",
          context__.to_vec());
      NX = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      NX = context__.vals_i("NX")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "NX", NX, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization","NTAU","int",
          context__.to_vec());
      NTAU = std::numeric_limits<int>::min();
      
      current_statement__ = 36;
      NTAU = context__.vals_i("NTAU")[(1 - 1)];
      current_statement__ = 36;
      current_statement__ = 36;
      check_greater_or_equal(function__, "NTAU", NTAU, 0);
      current_statement__ = 37;
      validate_non_negative_index("Y", "SIZE", SIZE);
      current_statement__ = 38;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(SIZE));
      Y = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 38;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          current_statement__ = 38;
          assign(Y, cons_list(index_uni(sym1__), nil_index_list()),
            Y_flat__[(pos__ - 1)], "assigning variable Y");
          current_statement__ = 38;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 39;
      validate_non_negative_index("SIGY", "SIZE", SIZE);
      current_statement__ = 40;
      context__.validate_dims("data initialization","SIGY","double",
          context__.to_vec(SIZE));
      SIGY = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(SIGY, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> SIGY_flat__;
        current_statement__ = 40;
        assign(SIGY_flat__, nil_index_list(), context__.vals_r("SIGY"),
          "assigning variable SIGY_flat__");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          current_statement__ = 40;
          assign(SIGY, cons_list(index_uni(sym1__), nil_index_list()),
            SIGY_flat__[(pos__ - 1)], "assigning variable SIGY");
          current_statement__ = 40;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 41;
      validate_non_negative_index("X", "SIZE", SIZE);
      current_statement__ = 42;
      validate_non_negative_index("X", "NX", NX);
      current_statement__ = 43;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(SIZE, NX));
      X = Eigen::Matrix<double, -1, -1>(SIZE, NX);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 43;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= SIZE; ++sym2__) {
            current_statement__ = 43;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 43;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 44;
      validate_non_negative_index("TAUINX", "NX", NX);
      current_statement__ = 45;
      context__.validate_dims("data initialization","TAUINX","int",
          context__.to_vec(NX));
      TAUINX = std::vector<int>(NX, std::numeric_limits<int>::min());
      
      current_statement__ = 45;
      assign(TAUINX, nil_index_list(), context__.vals_i("TAUINX"),
        "assigning variable TAUINX");
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
        current_statement__ = 45;
        current_statement__ = 45;
        check_greater_or_equal(function__, "TAUINX[sym1__]",
                               TAUINX[(sym1__ - 1)], 0);}
      current_statement__ = 46;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec());
      D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      D = context__.vals_r("D")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","DELTA","double",
          context__.to_vec());
      DELTA = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      DELTA = context__.vals_r("DELTA")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "DELTA", DELTA, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","PRIORSIG","int",
          context__.to_vec());
      PRIORSIG = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      PRIORSIG = context__.vals_i("PRIORSIG")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "PRIORSIG", PRIORSIG, 0);
      current_statement__ = 48;
      current_statement__ = 48;
      check_less_or_equal(function__, "PRIORSIG", PRIORSIG, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","B","double",
          context__.to_vec());
      B = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      B = context__.vals_r("B")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "B", B, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization","MU","double",
          context__.to_vec());
      MU = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      MU = context__.vals_r("MU")[(1 - 1)];
      current_statement__ = 51;
      validate_non_negative_index("omega", "NTAU", NTAU);
      current_statement__ = 52;
      validate_non_negative_index("uvs", "SIZE", SIZE);
      current_statement__ = 53;
      validate_non_negative_index("nvs", "SIZE", SIZE);
      current_statement__ = 54;
      validate_non_negative_index("nomega", "NX", NX);
      current_statement__ = 55;
      validate_non_negative_index("vs", "SIZE", SIZE);
      current_statement__ = 56;
      validate_non_negative_index("bgamma", "NX", NX);
      current_statement__ = 57;
      validate_non_negative_index("mu", "SIZE", SIZE);
      current_statement__ = 58;
      validate_non_negative_index("log_lik", "SIZE", SIZE);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += NTAU;
      num_params_r__ += SIZE;
      num_params_r__ += SIZE;
      num_params_r__ += NX;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_eds_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ b0;
      b0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      b0 = in__.scalar();
      std::vector<local_scalar_t__> omega;
      omega = std::vector<local_scalar_t__>(NTAU, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        current_statement__ = 2;
        assign(omega, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable omega");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(omega, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(omega[(sym1__ - 1)], 0, lp__),
            "assigning variable omega");
        } else {
          current_statement__ = 2;
          assign(omega, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(omega[(sym1__ - 1)], 0),
            "assigning variable omega");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> uvs;
      uvs = Eigen::Matrix<local_scalar_t__, -1, 1>(SIZE);
      stan::math::fill(uvs, DUMMY_VAR__);
      
      current_statement__ = 3;
      uvs = in__.vector(SIZE);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(uvs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(uvs[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable uvs");
        } else {
          current_statement__ = 3;
          assign(uvs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(uvs[(sym1__ - 1)], 0, 1),
            "assigning variable uvs");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> nvs;
      nvs = Eigen::Matrix<local_scalar_t__, -1, 1>(SIZE);
      stan::math::fill(nvs, DUMMY_VAR__);
      
      current_statement__ = 4;
      nvs = in__.vector(SIZE);
      Eigen::Matrix<local_scalar_t__, -1, 1> nomega;
      nomega = Eigen::Matrix<local_scalar_t__, -1, 1>(NX);
      stan::math::fill(nomega, DUMMY_VAR__);
      
      current_statement__ = 5;
      nomega = in__.vector(NX);
      Eigen::Matrix<local_scalar_t__, -1, 1> vs;
      vs = Eigen::Matrix<local_scalar_t__, -1, 1>(SIZE);
      stan::math::fill(vs, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> bgamma;
      bgamma = Eigen::Matrix<local_scalar_t__, -1, 1>(NX);
      stan::math::fill(bgamma, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(SIZE);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 13;
      if (logical_eq(0, PRIORSIG)) {
        current_statement__ = 11;
        assign(vs, nil_index_list(),
          stan::math::exp(
            add(stan::math::log(SIGY),
              multiply(subtract(multiply(uvs, 2), 1), DELTA))),
          "assigning variable vs");
      } else {
        current_statement__ = 9;
        assign(vs, nil_index_list(),
          stan::math::exp(
            add(stan::math::log(SIGY),
              multiply(nvs, stan::math::sqrt(DELTA)))),
          "assigning variable vs");
      }
      current_statement__ = 16;
      for (int i = 1; i <= NX; ++i) {
        current_statement__ = 14;
        assign(bgamma, cons_list(index_uni(i), nil_index_list()),
          (omega[(TAUINX[(i - 1)] - 1)] * nomega[(i - 1)]),
          "assigning variable bgamma");}
      current_statement__ = 17;
      assign(mu, nil_index_list(), add(b0, multiply(X, bgamma)),
        "assigning variable mu");
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        current_statement__ = 6;
        current_statement__ = 6;
        check_greater_or_equal(function__, "vs[sym1__]", vs[(sym1__ - 1)], 0);
      }
      {
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(b0, MU, stan::math::sqrt(B)));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(nomega, 0, 1));
        current_statement__ = 24;
        lp_accum__.add(uniform_lpdf<propto__>(uvs, 0, 1));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(nvs, 0, 1));
        current_statement__ = 32;
        if (logical_eq(0, D)) {
          current_statement__ = 30;
          for (int i = 1; i <= NTAU; ++i) {
            current_statement__ = 28;
            lp_accum__.add(-stan::math::log(omega[(i - 1)]));}
        } else {
          current_statement__ = 26;
          lp_accum__.add(normal_lpdf<propto__>(omega, 0, stan::math::sqrt(D)));
        }
        current_statement__ = 33;
        lp_accum__.add(normal_lpdf<propto__>(Y, mu, vs));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_eds_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double b0;
      b0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      b0 = in__.scalar();
      std::vector<double> omega;
      omega = std::vector<double>(NTAU, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        current_statement__ = 2;
        assign(omega, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable omega");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        current_statement__ = 2;
        assign(omega, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(omega[(sym1__ - 1)], 0),
          "assigning variable omega");}
      Eigen::Matrix<double, -1, 1> uvs;
      uvs = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(uvs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      uvs = in__.vector(SIZE);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        current_statement__ = 3;
        assign(uvs, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(uvs[(sym1__ - 1)], 0, 1),
          "assigning variable uvs");}
      Eigen::Matrix<double, -1, 1> nvs;
      nvs = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(nvs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      nvs = in__.vector(SIZE);
      Eigen::Matrix<double, -1, 1> nomega;
      nomega = Eigen::Matrix<double, -1, 1>(NX);
      stan::math::fill(nomega, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      nomega = in__.vector(NX);
      Eigen::Matrix<double, -1, 1> vs;
      vs = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(vs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> bgamma;
      bgamma = Eigen::Matrix<double, -1, 1>(NX);
      stan::math::fill(bgamma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(b0);
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        vars__.emplace_back(omega[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        vars__.emplace_back(uvs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        vars__.emplace_back(nvs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
        vars__.emplace_back(nomega[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      if (logical_eq(0, PRIORSIG)) {
        current_statement__ = 11;
        assign(vs, nil_index_list(),
          stan::math::exp(
            add(stan::math::log(SIGY),
              multiply(subtract(multiply(uvs, 2), 1), DELTA))),
          "assigning variable vs");
      } else {
        current_statement__ = 9;
        assign(vs, nil_index_list(),
          stan::math::exp(
            add(stan::math::log(SIGY),
              multiply(nvs, stan::math::sqrt(DELTA)))),
          "assigning variable vs");
      }
      current_statement__ = 16;
      for (int i = 1; i <= NX; ++i) {
        current_statement__ = 14;
        assign(bgamma, cons_list(index_uni(i), nil_index_list()),
          (omega[(TAUINX[(i - 1)] - 1)] * nomega[(i - 1)]),
          "assigning variable bgamma");}
      current_statement__ = 17;
      assign(mu, nil_index_list(), add(b0, multiply(X, bgamma)),
        "assigning variable mu");
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        current_statement__ = 6;
        current_statement__ = 6;
        check_greater_or_equal(function__, "vs[sym1__]", vs[(sym1__ - 1)], 0);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          vars__.emplace_back(vs[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
          vars__.emplace_back(bgamma[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      for (int i = 1; i <= SIZE; ++i) {
        current_statement__ = 19;
        assign(log_lik, cons_list(index_uni(i), nil_index_list()),
          normal_lpdf<false>(Y[(i - 1)], mu[(i - 1)], vs[(i - 1)]),
          "assigning variable log_lik");}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double b0;
      b0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      b0 = context__.vals_r("b0")[(1 - 1)];
      std::vector<double> omega;
      omega = std::vector<double>(NTAU, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(omega, nil_index_list(), context__.vals_r("omega"),
        "assigning variable omega");
      std::vector<double> omega_free__;
      omega_free__ = std::vector<double>(NTAU, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        current_statement__ = 2;
        assign(omega_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(omega[(sym1__ - 1)], 0),
          "assigning variable omega_free__");}
      Eigen::Matrix<double, -1, 1> uvs;
      uvs = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(uvs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> uvs_flat__;
        current_statement__ = 3;
        assign(uvs_flat__, nil_index_list(), context__.vals_r("uvs"),
          "assigning variable uvs_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          current_statement__ = 3;
          assign(uvs, cons_list(index_uni(sym1__), nil_index_list()),
            uvs_flat__[(pos__ - 1)], "assigning variable uvs");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> uvs_free__;
      uvs_free__ = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(uvs_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        current_statement__ = 3;
        assign(uvs_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(uvs[(sym1__ - 1)], 0, 1),
          "assigning variable uvs_free__");}
      Eigen::Matrix<double, -1, 1> nvs;
      nvs = Eigen::Matrix<double, -1, 1>(SIZE);
      stan::math::fill(nvs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nvs_flat__;
        current_statement__ = 4;
        assign(nvs_flat__, nil_index_list(), context__.vals_r("nvs"),
          "assigning variable nvs_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
          current_statement__ = 4;
          assign(nvs, cons_list(index_uni(sym1__), nil_index_list()),
            nvs_flat__[(pos__ - 1)], "assigning variable nvs");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nomega;
      nomega = Eigen::Matrix<double, -1, 1>(NX);
      stan::math::fill(nomega, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nomega_flat__;
        current_statement__ = 5;
        assign(nomega_flat__, nil_index_list(), context__.vals_r("nomega"),
          "assigning variable nomega_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
          current_statement__ = 5;
          assign(nomega, cons_list(index_uni(sym1__), nil_index_list()),
            nomega_flat__[(pos__ - 1)], "assigning variable nomega");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(b0);
      for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
        vars__.emplace_back(omega_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        vars__.emplace_back(uvs_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        vars__.emplace_back(nvs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
        vars__.emplace_back(nomega[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b0");
    names__.emplace_back("omega");
    names__.emplace_back("uvs");
    names__.emplace_back("nvs");
    names__.emplace_back("nomega");
    names__.emplace_back("vs");
    names__.emplace_back("bgamma");
    names__.emplace_back("mu");
    names__.emplace_back("log_lik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NTAU)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(SIZE)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(SIZE)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NX)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(SIZE)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NX)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(SIZE)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(SIZE)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "b0");
    for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "uvs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nvs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nomega" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bgamma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "b0");
    for (int sym1__ = 1; sym1__ <= NTAU; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "uvs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nvs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nomega" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "vs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= NX; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bgamma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= SIZE; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" << NTAU << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"uvs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"parameters\"},{\"name\":\"nvs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"parameters\"},{\"name\":\"nomega\",\"type\":{\"name\":\"vector\",\"length\":" << NX << "},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"transformed_parameters\"},{\"name\":\"bgamma\",\"type\":{\"name\":\"vector\",\"length\":" << NX << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" << NTAU << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"uvs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"parameters\"},{\"name\":\"nvs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"parameters\"},{\"name\":\"nomega\",\"type\":{\"name\":\"vector\",\"length\":" << NX << "},\"block\":\"parameters\"},{\"name\":\"vs\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"transformed_parameters\"},{\"name\":\"bgamma\",\"type\":{\"name\":\"vector\",\"length\":" << NX << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << SIZE << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_eds_namespace::model_eds;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_eds_namespace::profiles__;
}
#endif
#endif
